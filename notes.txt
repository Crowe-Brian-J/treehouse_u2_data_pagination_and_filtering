---Before Start

[X] - Complete U2 Curriculum
[X] - Create GitHub Repo
[X] - Download Project Files
[X] - Review Your Resources
[X] - Carefully Read Project Instructions

--Resources--

---Study Guide
Project 2 Study Guide:
https://teamtreehouse.com/library/study-guide-for-project-2-data-pagination-and-filtering

---Project Warm Ups:
https://teamtreehouse.com/library/warm-ups-data-pagination-and-filtering

---Walkthrough:
https://teamtreehouse.com/library/walkthrough-for-project-2-data-pagination-and-filtering

---Workshop:
https://teamtreehouse.com/library/javascript-search

---Instructions:
https://teamtreehouse.com/projects/data-pagination-and-filtering#instructions

--Project Instructions--

4 Steps:

[X] 1. Getting Started with Project Files
* Open the project in VS Code open the script.js file, load the index.html file in Brave (Go Live) and open the DevTools Console

*If you have trouble, reach out on Slack

[X] 2. The showPage Function

Will be responsible for rendering the student cards to page. Depending on which page is requested by the user, the corresponding students from a given array will be shown on the page

  [X] a. Create a new function called showPage and give it two parameters
    [X] * A list paramter to represent an array of student objects
    [X] * A page parameter to represent the requested page number

  [X] b. In the body of the function:
    [X] * Create two variables to store the start index and end index of the list items to be displayed on the given page. To make it dynamic, use the page parameter and some basic math to calculate the value of these variables like so
      [X] ** Start Index = (page * items per page) - items per page
      [X] ** End Index = page * items per page

    [X] * Select the ul element with a class of student-list and assign its value to a variable

    [X] * Use the innerHTML property to set the HTML content of the student-list variable you just created to an empty string. This will remove any students that might have previously been displayed

    [X] * Loop over the list of students

    [X] * Inside the loop:
      [X] ** Write a conditional statement that checks if the current index (i) is greater than or equal to the start index variable and less than the end index variable
      [X] ** Inside that conditional
        [X] *** Create the DOM Elements needed to display the information for each matching student as you iterate over the list parameter. You can find an example of what the final version of these elements should look in the project's instruction page.
        [X] *** Insert the elements you created into the student-list variable you created earlier. The insertAdjacentHTML method and beforeend option work well for This
*** Pro Tip
  Because you will need to create multiple elements to display the information for each student, you might consider using a template literal

[ ] 3. The addPagination Function

Will be responsible for rendering the pagination buttons to the page. When clicking one of these buttons, the showPage function will be called to update the student cards to match the requested page

  [X] a. Create a new function called addPagination

  [X] b. Add a list parameter to represent the array of student objects

  [X] c. In the body of the function:
    [X] * Create a variable to store the number of pagination buttons needed. You can calculate this using the length of the list. Remember, you will want to display 9 students per page

    [X] * Select the ul element with a class of link-list and store it in a variable

    [X] * Use the innerHTML property to set the HTML contentof the link-list variable to an empty string. This will remove any pagination buttons that may habe previously been displayed

    [X] * Loop over the variable that contains the number of pages

    [X] * Inside the loop:
      [X] ** Create a new button element for each of the pages. See example in instructions page
      [X] ** Append these elements to the .link-list element. The insertAdjacentHTML method and beforeend option work well for this

    [X] * Select the first pagination button and give it a class name of active

    [X] * Create an event listener to listen for clicks on the .link-list element

    [X] * Inside the event listener:
      [X] ** Create a conditional that checks if the clicked element is a button. This will ensure that the function will only be called if one of the buttons is clicked. If the conditional evaluates to be true:
        [X] *** Remove the active css from any other pagination button
        [X] *** Add the active class to the button that was just clicked
        [X] *** Call the showPage function and pass it the list and page number to display

[X] 4. Finishing the Project

Final stage of the project is the most important. This is where developer skills really shine as you carefully double-check that you've accomplished all requirements and that your project is ready for submission.

  [X] a. Code Comments
    - It is a best practice for development code to be well commented. Replace provided comments with your own to briefly describe your code

  [X] b. Code Readability
    - Readability is second only to functionality. Double-check your code to ensure spacing and indentation are consistent

  [X] c. Quality Assurance Testing
    - This is the keystone step in the development process

    [X] * Open and run your app
    [X] * Open the DevTools
    [X] * Pretend to be a user and test all aspects of functionality and every possible state of the app while monitoring the console for bugs and resolving any that arise.

*** Pro Tip
  Before submitting your project, it's always a good idea to get an additional pair of eyes on it. This will avoid your project from being returned to you if you missed one of the requirements. You can share a link to your GitHub repository in the #review-my-project channel on Slack and a fellow student or staff member will happily have a look at it.

*** Extra Credit
  To get an "Exceeds" rating, complete all of the steps below.

  [ ] 1. Add a search component

  Dynamically create and add a search bar. Avoid making any changes in the index.html file and instead use your js skills for this. See sample elements below. If you follow the example below, the provided CSS will style the elements for you.

  <label for="search" class="student-search">
    <span>Search by Name</span>
    <input id="search" placeholder="Search by name...">
    <button type="button"> <img src ="img/icn-search.svg" alt="Search Icon"></button>
  </label>

  [ ] 2. Add search functionality
  
  When the search is performed, the student data is filtered so that only students whose name includes the search value are shown. The search should be be case-insensitive and work for partial matches. 

  To improve the functionality and user experience, consider adding a keyup event listener (would personally prefer input in case of pasting) to the search input so that the list filters in real-time as the user types. Should be in addition to clicking search button

  ** Pro Tip
    Already created the function to show 9 students. Call that by submitting the searched list as array argument

  [ ] 3. Add Pagination for Search Results

  Pagination buttons should change based on the number of matches to the search. Clicking a pagination button should display the corresponding matches

  ** Pro Tip
    Already created pagination function. Feed that.

  [ ] 4. Handle No Search matches

  If no matches are found, display a "No Results Found..." type message on the page. ***DON'T*** use alert()